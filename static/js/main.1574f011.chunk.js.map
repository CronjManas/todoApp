{"version":3,"sources":["utils/New.js","FormD.js","Items.js","App.js","serviceWorker.js","index.js"],"names":["newid","New","FormD","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sortDuration","duration","sortPriority","priority","sortDate","date","state","id","name","status","handle","bind","assertThisInitialized","handleOnDrtnChange","handleOnPrtyChange","handleOnTaskChange","handleOnDateChange","event","preventDefault","Itemtodo","NewId","click","taskName","target","value","setState","time","x","parseInt","react_default","a","createElement","react_bootstrap_Form_default","onSubmit","Group","controlId","Control","size","type","placeholder","onChange","Row","Col_default","md","xs","sm","Button_default","variant","block","style","background","border","boxShadow","Card_default","Text","ButtonGroup_default","width","onClick","color","borderColor","Component","Item","taskDone","console","log","item","statusChange","className","textDecoration","Items","_this2","items","ItemsTodo","sort","compare","compare2","ItemTodo","helper","ItemDes","Temp","push","updateStatus","index","find","Update","$set","b","Moment","asSeconds","y","comparison","Date","_this3","Row_default","span","offset","bg","text","Header","as","Body","Title","src_FormD","Table_default","striped","bordered","hover","map","Items_Item","key","display","ListGroup_default","App","src_Items","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1574f011.chunk.js","sourcesContent":["let newid =1;\n\nfunction New (){\n    newid++;\n    return newid;\n}\n\nexport default New;","import React , {Component} from 'react';\nimport NewId from './utils/New';\nimport './Form.css'\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\n// import Row from 'react-bootstrap/Row';\n// import TimeField from 'react-simple-timefield';\n\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nclass FormD extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n           id:0, name:'',priority:0,duration:'00:00',date:'00/00/0000',status:true\n        }\n        this.handle = this.handle.bind(this);\n        this.handleOnDrtnChange = this.handleOnDrtnChange.bind(this);\n        this.handleOnPrtyChange = this.handleOnPrtyChange.bind(this);\n        this.handleOnTaskChange = this.handleOnTaskChange.bind(this);\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\n    }\n    handle(event){\n        event.preventDefault();\n        if(this.state.name !== ''){\n            let Itemtodo = {\n                id : NewId(),\n                name: this.state.name,\n                priority : this.state.priority,\n                duration : this.state.duration,\n                date : this.state.date,\n                status : this.state.status\n            }\n            \n            // console.log(Itemtodo);\n            this.props.click(Itemtodo);\n            \n        }\n        \n    }\n    handleOnTaskChange(event){\n        let taskName = event.target.value;\n        this.setState({name:taskName });\n    }\n    handleOnDrtnChange(event){\n        const time = event.target.value;\n        this.setState({duration:time});\n        \n        \n    }\n    handleOnPrtyChange(event){\n        const x = parseInt(event.target.value)\n        this.setState({priority: x});\n    }\n    sortDuration = () => {\n        this.props.duration();\n    }\n    sortPriority = () => {\n        this.props.priority();\n    }\n    sortDate = () => {\n        this.props.date();\n    }\n    handleOnDateChange(event){\n        const date = event.target.value;\n        // console.log(typeof(date));\n        this.setState({date:date});\n        \n    }\n   \n    render(){\n        return (\n            <div>\n                <Form onSubmit={this.handle}>\n                <Form.Group controlId=\"formTask\">\n                    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Enter Task\" onChange = {this.handleOnTaskChange}/>\n                </Form.Group>\n                    <Form.Group controlId=\"formPrio\">\n                        <Form.Row> \n                            <Col md={3} xs={2} sm={2}>\n                            <Form.Control size=\"sm\" onChange={this.handleOnPrtyChange} type=\"number\" placeholder=\"Priority\"/>\n                            </Col>\n                            <Col md={3} xs={4} sm={4}>\n                            <Form.Control size=\"sm\" onChange={this.handleOnDrtnChange} type=\"time\" />\n                            </Col>\n                            <Col md={6} xs={6} sm={6}>\n                            <Form.Control size=\"sm\" onChange={this.handleOnDateChange} type=\"date\" />\n                            </Col>\n                        </Form.Row>\n                    </Form.Group>\n                    <Button variant=\"primary\" block type=\"submit\" style={{background:'#ff7a00', border:'none',boxShadow:'0px 2px 6px rgba(0,0,0,0.5)'}}>Submit</Button>\n                </Form>\n                         <br/>\n                         <Card.Text>Actions:</Card.Text>\n                         <ButtonGroup style={{width:'100%'}} >\n                         <Button onClick={this.sortDuration} variant=\"outline-dark\" style={{color:'#fff',background:'#ff7a00',borderColor:'#ff7a00'}} >Duration </Button>\n                         <Button onClick={this.sortPriority} variant=\"outline-dark\" style={{color:'#fff',borderColor:'#ff7a00',background:'#ff7a00'}} >Priority</Button>\n                         <Button onClick={this.sortDate} variant=\"outline-dark\" block style={{color:'#fff',borderColor:'#ff7a00',background:'#ff7a00'}}>Date</Button>\n                         </ButtonGroup>\n                         \n               \n                <br/>\n                <br/>\n                \n                        \n                   \n               \n               \n               \n                \n                \n                \n            </div>\n        );\n    }\n}\n\nexport default FormD;","import React , {Component} from 'react';\nimport FormD from './FormD';\nimport Update from 'immutability-helper';\nimport './Item.css';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Moment from 'moment';\n\nclass Item extends Component{\n    \n    \n    \n    taskDone = () => {\n        console.log(this.props.item.id);\n        let statusChange = !this.props.item.status;\n        this.props.status(statusChange,this.props.item.id)\n    }\n    render(){\n        \n        return (\n\n                \n              <tr onClick={this.taskDone} className=\"Item\" style={!this.props.item.status ? {textDecoration:'line-through'} : {textDecoration:'none'}}>\n                <td>{this.props.item.name}</td>\n                <td>{this.props.item.priority}</td>\n                <td>{this.props.item.duration}</td>\n                <td>{this.props.item.date}</td>\n                </tr>\n                \n           \n        );\n    }\n}\nclass Items extends Component {\n    constructor (props) {\n        super(props);\n        this.state ={\n            ItemsTodo :[{id:0,name:'',priority:0,duration:'00:00',date:'0000-00-00',status:true}]\n        }   \n        \n    }\n    compare(a,b){\n        const x  = Moment.duration(a.duration).asSeconds();\n        const y = Moment.duration(b.duration).asSeconds();\n        \n        \n        \n        let comparison = 0;\n        if (x > y) {\n        comparison = 1;\n        } else if (x < y) {\n        comparison = -1;\n        }\n  \n        return comparison;\n    }\n    compare2(a,b){\n        const x  = a.priority;\n        const y = b.priority;\n        let comparison = 0;\n        if (x > y) {\n        comparison = 1;\n        } else if (x < y) {\n        comparison = -1;\n        }\n  \n        return comparison;\n    }\n\n    sortDuration = () => {\n        let items = this.state.ItemsTodo;\n        items.sort(this.compare);\n        // console.log(items);\n        // console.log(typeof(items[1].duration));\n        // let time = Moment(items[1].duration,'HH:mm');\n        // console.log(time['_d'].getTime());\n        // let x = Moment.duration(items[1].duration).asSeconds();\n        // console.log(x);\n        console.log(items);\n        \n        \n        this.setState({ItemsTodo:items});\n        \n        \n        \n    \n        \n        \n    }\n    sortPriority= () => {\n        let items = this.state.ItemsTodo;\n        items.sort(this.compare2);\n        this.setState({ItemTodo:items});\n    }\n    //Sorting Date \n    helper(a,b){\n        let x = a.date;\n        \n        let y = b.date;\n        console.log(x);\n        \n        console.log(y);\n        \n        \n        return new Date(y) - new Date(x);\n        \n    }\n    sortDate = () => {\n        let items = this.state.ItemsTodo;\n        // let date = Date.parse\n        items.sort(this.helper);\n        this.setState({ItemTodo:items});\n        \n        \n    }\n    handle = (ItemDes) => {\n        console.log(ItemDes);\n        let Temp =[];\n        Temp = this.state.ItemsTodo;\n        console.log(Temp);\n        Temp.push(ItemDes);\n        \n        this.setState({ItemsTodo : Temp});\n    }\n\n    updateStatus = (value,index) => {\n        \n       let Item = this.state.ItemsTodo.find((item) => {\n           \n                if(item.id === index){\n                    item.status = value;\n                    return item;\n                }\n       });\n    //    console.log(Item);\n       \n       this.setState({ItemsTodo: Update(this.state.ItemsTodo,{index:{$set: Item}})});\n            \n    }\n\n    render(){\n        return (\n           <div className=\"container\">\n               <Row>\n                   <Col md={{span: 6 , offset: 3}} sm={{span:8, offset:2}} xs={{span:12}}>\n                   <Card bg=\"dark\" text=\"white\">\n                   <Card.Header as=\"h3\" className=\"text-center\" style={{color:'#ff7a00'}}>TODO APP</Card.Header>\n                   <Card.Body>\n                   <Card.Title>Input Task</Card.Title>\n                   <FormD click={this.handle} duration={this.sortDuration} priority = {this.sortPriority} date = {this.sortDate}/>\n                   <Table striped bordered hover size=\"sm\" variant=\"dark\">\n                       <thead>\n                           <tr>\n                           <th>\n                               Task\n                           </th>\n                           <th>\n                               Priority\n                           </th>\n                           <th>\n                               Start Time\n                           </th>\n                           <th>\n                               Start Date\n                           </th>\n                           </tr>\n                           \n                       </thead>\n                       <tbody>\n                       {    \n                        this.state.ItemsTodo.map((ItemTodo) => {\n                            return (\n                                ItemTodo.id !== 0 ?\n                                <Item key={ItemTodo.id} item = {ItemTodo} status= {this.updateStatus}/>                                \n                                : <tr key={ItemTodo.id} style={{display:'none'}}></tr>\n                            )\n                        })\n                    }\n\n                       </tbody>\n                   </Table>\n                   \n                   <ListGroup variant=\"flush\">\n\n                    \n                   </ListGroup>\n                   \n                   </Card.Body>\n                    \n\n                    \n                </Card>    \n\n\n                   </Col>\n               </Row>\n               \n                   \n               \n              \n           </div> \n        );\n    }\n}\n\nexport default Items;","import React, {Component} from 'react';\n// import Form from './Form';\n// import Buttons from './Buttons';\nimport Items from './Items';\nimport './App.css';\n\nclass App extends Component  {\n  \n  render(){\n    return (\n      <div className=\"App\">\n        <Items />\n        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}